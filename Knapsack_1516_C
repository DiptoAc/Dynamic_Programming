//https://codeforces.com/contest/1516/problem/C
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template <typename T>
using oset = tree<T, null_type, less<T>,
rb_tree_tag, tree_order_statistics_node_update>;
#define ll long long
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define pb push_back
#define ok cout<<"ok"<<endl;
#define endl '\n'
const ll M =1e9+7;
const ll N =1e6;
int32_t main()
{
    fast
    ll i,j,k,n,m,q,tc=1,cs=0;//cin>>tc;
    while(tc--)
    {
        cin>>n;
        ll sum=0,pos=0,g=0;
        vector<ll>v(n);
        for(i=0;i<n;i++)
        {
            cin>>v[i];
            sum+=v[i];
            g=__gcd(g,v[i]);
        }
        if(sum&1){cout<<0<<endl;continue;} ///If sum odd.
        vector<ll>dp(sum+1,-1);
        dp[0]=0;
        for(i=0;i<n;i++) ///Checking if sum/2 is possible to make. It's the knapsack part
        {
            for(j=sum;j>=v[i];j--)
            {
                if(dp[j-v[i]]!=-1){dp[j]=dp[j-v[i]]+v[i];}
            }
        }
        if(dp[sum/2]==-1){cout<<0<<endl;continue;}
        k=1;
        while(g%2==0){k*=2;g/=2;} ///Convert to a smaller problem (10,10,4,4,8,8,8,4 equal to 5,5,2,2,4,4,4,2)
        for(i=0;i<n;i++){v[i]/=k;if(v[i]&1){odd_pos=i+1;break;}}
        cout<<1<<endl<<odd_pos<<endl;
    }
}
